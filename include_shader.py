#!/usr/bin/env python3
# based on https://stackoverflow.com/a/46669656/19754926

import sys
import re
import os


def is_printable_ascii(byte):
    return byte >= ord(" ") and byte <= ord("~")


def needs_escaping(byte):
    return byte == ord('"') or byte == ord("\\")


def stringify_nibble(nibble):
    if nibble < 10:
        return chr(nibble + ord("0"))
    return chr(nibble - 10 + ord("a"))


def write_byte(of, byte):
    if is_printable_ascii(byte):
        if needs_escaping(byte):
            of.write("\\")
        of.write(chr(byte))
    elif byte == ord("\n"):
        of.write('\\n"\n"')
    else:
        of.write("\\x")
        of.write(stringify_nibble(byte >> 4))
        of.write(stringify_nibble(byte & 0xF))


def mk_valid_identifier(s):
    s = re.sub("^[^_a-z]", "_", s)
    s = re.sub("[^_a-z0-9]", "_", s)
    return s


def preprocess(shaderfile, shaderpath, included=set(), defines=dict):
    if shaderfile in included:
        raise ValueError("Circular include for file: {shaderpath}")
    processed = []
    for line in shaderfile:
        line = line.strip()
        if line.startswith("#include"):
            include_file = line.split()[1].strip('"')
            include_path = os.path.join(os.path.dirname(shaderpath), include_file)
            if os.path.exists(include_path):
                # Recursively preprocess the included file
                processed.append(
                    preprocess(open(include_path, "r"), include_path, included)
                )
            else:
                raise FileNotFoundError(f"Included file not found: {include_file}")
        elif line.startswith("#define"):
            name = line.split()[1]
            # TODO
        else:
            # Normal lines are added directly to the output
            processed.append(line)

    return "\n".join(processed)


def main():
    # `xxd -i` compatibility
    if len(sys.argv) != 4 or sys.argv[1] != "-i":
        print("Usage: include_shader -i infile outfile")
        exit(2)

    with open(sys.argv[2], "r") as infile:
        with open(sys.argv[3], "w") as outfile:

            identifier = mk_valid_identifier(sys.argv[2])
            outfile.write("// GENERATED CODE! Do not edit this file.\n\n")
            outfile.write("#include <stddef.h>\n\n")
            outfile.write("extern const char {}[];\n".format(identifier))
            outfile.write("extern const size_t {}_len;\n\n".format(identifier))
            outfile.write('const char {}[] =\n"'.format(identifier))

            bytes = list(preprocess(infile, sys.argv[2]))

            for byte in bytes:
                if byte == b"":
                    break
                write_byte(outfile, ord(byte))

            outfile.write('";\n\n')
            outfile.write(
                "const size_t {}_len = sizeof({}) - 1;\n".format(identifier, identifier)
            )


if __name__ == "__main__":
    main()
