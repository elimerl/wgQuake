// GENERATED CODE! Do not edit this file.

#include <stddef.h>

extern const char shader_wgsl[];
extern const size_t shader_wgsl_len;

const char shader_wgsl[] =
"hello\n"
"\n"
"struct VertexInput {\n"
"@location(0) position: vec3f,\n"
"@location(1) normal: vec3f,\n"
"@location(2) color: vec3f,\n"
"@location(3) uv: vec2f,\n"
"};\n"
"\n"
"struct VertexOutput {\n"
"@builtin(position) position: vec4f,\n"
"@location(0) color: vec3f,\n"
"@location(1) normal: vec3f,\n"
"@location(2) uv: vec2f,\n"
"};\n"
"\n"
"/**\n"
"* A structure holding the value of our uniforms\n"
"*/\n"
"struct MyUniforms {\n"
"projectionMatrix: mat4x4f,\n"
"viewMatrix: mat4x4f,\n"
"modelMatrix: mat4x4f,\n"
"color: vec4f,\n"
"time: f32,\n"
"};\n"
"\n"
"@group(0) @binding(0) var<uniform> uMyUniforms: MyUniforms;\n"
"@group(0) @binding(1) var gradientTexture: texture_2d<f32>;\n"
"@group(0) @binding(2) var textureSampler: sampler;\n"
"\n"
"@vertex\n"
"fn vs_main(in: VertexInput) -> VertexOutput {\n"
"var out: VertexOutput;\n"
"out.position = uMyUniforms.projectionMatrix * uMyUniforms.viewMatrix * uMyUniforms.modelMatrix * vec4f(in.position, 1.0);\n"
"out.normal = (uMyUniforms.modelMatrix * vec4f(in.normal, 0.0)).xyz;\n"
"out.color = in.color;\n"
"// Repeat the texture 6 times along each axis\n"
"out.uv = in.uv * 6.0;\n"
"return out;\n"
"}\n"
"\n"
"@fragment\n"
"fn fs_main(in: VertexOutput) -> @location(0) vec4f {\n"
"// Get data from the texture using our new sampler\n"
"let color = textureSample(gradientTexture, textureSampler, in.uv).rgb;\n"
"\n"
"// Gamma-correction\n"
"let corrected_color = pow(color, vec3f(2.2));\n"
"return vec4f(corrected_color, uMyUniforms.color.a);\n"
"}";

const size_t shader_wgsl_len = sizeof(shader_wgsl) - 1;
